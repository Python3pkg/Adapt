####ANATOMY OF BASIC BULK MESSAGE####
FIRST BYTE OF INITIAL BULK OUT MESSAGES IS NUMBER OF BYTES AFTER THAT BYTE LEFT IN THE MESSAGE

####STATUS MESSAGES THAT APPEAR EVERYWHERE!####
BULK IN (2) 01:XX 
            #Status code. 1 byte long. 00 known to be 'good'. 03 is a fail of some kind (when the device is already in use).

-------------------------------------------------------------------------------

**SOME CRAZY CRYPTO THING PROBABLY** #called after certain calls in 2nd pass of init.
BULK OUT(1) 07:00:03:00:xx:xx:xx:xx 
            #Last digits seem to be time again, so likely a random seed. Written with WriteFile.
BULK IN (2) 05:00:xx:xx:xx:xx 
            #Take the four bytes passed into the last message (they appear in the stream in little endian, but for manipulation put them into big endian, or do correct math on them). ~0xaa:aa:aa:aa + 0x7b


**ENABLE DISABLE JTAG**
BULK OUT(1) 03:02:xx:00 
            #Enable(00)/Disable(01) JTAG port
BULK IN (2) #{Status code.}


**NUMBER OF PORTS**
BULK OUT(1) 04:02:02:00:01
BULK IN (2) 02:XX:XX 
            #Number of ports.

**GET PORT PROPERTIES**
BULK OUT(1) 04:02:02:00:05 
            #Not sure how this points to the first port since I only have a device on me with one port.
BULK IN (2) 06:00:01:01:00:00:00 
            #The properties... somewhere in there.


**SET SPEED**
BULK OUT(1) 07:02:03:00:XX:XX:XX:XX #XX is the requested speed.
BULK IN (2) 05:00:XX:XX:XX:XX #XX is the actual set speed.


**GET SPEED**
BULK OUT(1) 03:02:04:00
BULK IN (2) 05:00:XX:XX:XX:XX #XX is the speed.


**SET Tms Tdi Tdo**
BULK OUT(1) 06:02:05:00:MS:DI:DO
BULK IN (2) #Status code.


**GET Tms Tdi Tdo Tck**
BULK OUT(1) 03:02:06:00
BULK IN (2) 05:00:MS:DI:DO:CK


**WRITE TDI BITS**
BULK OUT(1) 09:02:08:00:00:00:XX:XX:XX:XX (0b1000) (09:02:08:00:TS:RV:XX:XX:XX:XX?)
            #Initialize tdi bit transfer. XX is the number of bits to send (Remember it is transferred in little endian). RV is true if data should be returned. Third byte seems to be a bit flag specifying what is being sent. 08 is clearly tdi. 04 may be tms. Possibly combine def with above write deff.
BULK IN (2) #{Status code.}
BULK OUT(3) xx:xx:xx 
            #bits to tdi send (Send little endian). 
BULK OUT(1) 03:02:88:00 (little endian) BYTE 3 is 80|FLAGS
            #Tends to finish all tdi calls. Can't tell if response is used at all since no result buffer is supplied.
BULK IN (2) 05:80:xx:xx:xx:xx 
            #xx is the number of bits sent. Need to test with and without this message.


**READ TDO BITS**
BULK OUT(1) 09:02:09:00:TS:TI:XX:XX:XX:XX (0b1001)
            #Read bits xx (little endian) off of tdo. TS and TI are 1 or 0 for what to hold those pins at during the read clock cycles.
BULK IN (2) #Status code.
BULK IN (4) xx* 
            #However many bytes required to hold the number of bits shifted out.
BULK OUT(1) 03:02:89:00 (little endian) BYTE 3 is 80|FLAGS
            #Tends to finish all td0 read calls. 0x89 is one different from the ending messages of writes.
BULK IN (2) 05:40:xx:xx:xx:xx 
            #x is litle endian number of bits read.


**WRITE TMS/TDI BITS**
EXAMPLE: Set state to SHIFT_DR. Raw data making this request is 0x0022AA which is set to send 9 pairs of tdi and tms bits (rounded up to 3 bytes of transmitted data). In binary this is: 0b00:00100010:10101010 which means tdi bits: 000000000; tms bits: 001011111. Remember these are shifted in to the right, so the LSB is the first one sent in. The tms group of 5 1s sets the state to TEST-LOGIC-RESET. The remaining 4 bits shift the jtag controller down to SHIFT-DR.
BULK OUT(1) 08:02:0A:00:RV:XX:XX:XX:XX (0b1010)
            #Initialize tdi/tms bit pair transfer. ?? is the number of bit pairs to send (Remember it is transferred in little endian). RV is true if data should be returned. 
BULK IN (2) #{Status code.}
BULK OUT(3) xx:xx:xx 
            #bits to tdi/tms send (Send little endian). 
BULK IN (4) xx* 
            #If RV was 1 in the first bulk ouut message, this should be the data shifted out of TDO at the same time.
BULK OUT(1) 03:02:8a:00 (little endian) BYTE 3 is 80|FLAGS
            #Tends to finish all tdi/tms calls. Can't tell if response is used at all since no result buffer is supplied.
BULK IN (2) {
            05:80:xx:xx:xx:xx #xx is the number of bits sent. Need to test with and without this message.	
          OR
            09:C0:08:00:00:00:08:00:00:00 #Still seems to send back the length, but maybe now it sends back the shifted in and the shifted out, or the number of each bit type instead of pair. The length is now 9. C0 = 0b1100 while 08 = 0b1000 and there is one more float so this is someother status listing. May try sending more bits to see what happen. #NOTE! TDO reads end with a similar response of only 04. 04+08 = c0. Very likely number of bits read and written which seems stupid...
}


**WRITE TMS BITS**
BULK OUT(1) 09:02:0B:00:RV:TI:XX:XX:XX:XX (0b1011)
            #RV is 1 if the data shifted out of TDO should be returned. TI is likely the state to hold the TDI pin during the operation. XX is the number of bits to shift.


**GET BATCH PORT PROPERTIES (What does this even mean? No idea.)**
BULK OUT(1) 03:02:18:00
BULK IN (2) 01:04 #Seriously no idea.



CTRL OUT(0) A0 #commands seem to be some sort of control retister write. Not used in the init of spartan 3 ****????

CTRL IN(0)  E1 #Product Name (value: 0, length: 28) ASCII

CTRL IN(0)  E2 #User Name (value: 0, length: 16) ASCII

CTRL IN(0)  E4 #Serial Number (value: 0, length: 12) ASCII

CTRL IN(0)  E6 #Firmware Version (Value: 0, length: 2) RAW BYTES REVERSED (as in MIN:MAJOR. 16:01->0116)

CTRL IN(0)  E7 #Seems to be some sort of status register effected by calls to A0 Value usually 0->xx:00:00:00:00:00:00:00 (value: 0, length: 8)****???? For the Basys2 board, the 64 bit values are | together. Define port properties bits for JTAG ports.??? djtg.h?

CTRL OUT(0) E8 #Sends random seed, or 14 if can't get uptime as source. EC is usually called after. After EC seed is set to 00. (value: 0, length: 2)

CTRL IN(0)  E9 #Product ID (value: 0, length: 4) Reversed byte order for some reason RAW BYTES. Digilent adapter cables have BigE 000000xx. In normal cases, this last byte being between 0x20 and 0x40 has special meaning of some kind. 

CTRL IN(0)  EC #OEM ID CHECK. Takes value passed in from E8 and xors the bytes plus other stuff still researching. ??:??:??:yx where xy = e8(hi)^e8(lo). The four bytes spell Digi when xored with the xor of the bytes passed to E8. REVERSED so technically igiD. It also seems to support (these values return reversed) 0x356A92C7 and 0x586F656D.




e4 00474384 call    near ptr unk_4582E0
e2 004744CD call    near ptr unk_4583C0
e9 0045456B call    near ptr unk_456A80 #the correct ordered int is anded with FFFFFF00
e7 *SAME*
e9 004545B5 call    near ptr unk_458070
e8 *SAME*
ec *SAME*
e8 *SAME*
BULK 004F4B8 (unk_4e4e40)

e9
e7
e7
BULK STUFF

e4
e2
e9
e7
e9
e8
ec
e8
BULK different

e9
e7
e7
BULK STUFF